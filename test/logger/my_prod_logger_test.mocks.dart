// Mocks generated by Mockito 5.1.0 from annotations
// in wrapper_logger/test/logger/my_prod_logger_test.dart.
// Do not manually edit this file.

import 'package:mockito/mockito.dart' as _i1;
import 'package:wrapper_logger/logger/logger.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

/// A class which mocks [MyLoggerClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockMyLoggerClient extends _i1.Mock implements _i2.MyLoggerClient {
  MockMyLoggerClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void log(_i2.LoggerLevel? level, String? message,
          [Object? error, StackTrace? stackTrace]) =>
      super.noSuchMethod(
          Invocation.method(#log, [level, message, error, stackTrace]),
          returnValueForMissingStub: null);
}

/// A class which mocks [LogSettingsProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockLogSettingsProvider extends _i1.Mock
    implements _i2.LogSettingsProvider {
  MockLogSettingsProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool isLogEnable() => (super.noSuchMethod(Invocation.method(#isLogEnable, []),
      returnValue: false) as bool);
  @override
  _i2.LoggerLevel logLevel() =>
      (super.noSuchMethod(Invocation.method(#logLevel, []),
          returnValue: _i2.LoggerLevel.verbose) as _i2.LoggerLevel);
}
